[package]
name = "kms"
version.workspace = true
edition.workspace = true
publish.workspace = true
authors.workspace = true
license.workspace = true

[lib] # Central KMS
name = "kms_lib"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]] # Bin to generate keys
name = "kms-gen-keys"
path = "src/bin/kms-gen-keys.rs"
required-features = ["testing"]

[[bin]] # Bin to generate TLS certificates for the service
name = "kms-gen-tls-certs"
path = "src/bin/kms-gen-tls-certs.rs"

[[bin]] # Bin to run the gRPC server
name = "kms-server"
path = "src/bin/kms-server.rs"

[[bin]] # Bin to initialize the threshold KMS cluster after all nodes are up and running.
name = "kms-init"
path = "src/bin/kms-init.rs"

[[bin]] # Bin for the custodians to generate keys and help in recovery
name = "kms-custodian"
path = "src/bin/kms-custodian.rs"

[dependencies]
aes.workspace = true
aes-gcm-siv = "=0.11.1"
aes-prng.workspace = true
alloy-dyn-abi = { workspace = true }
alloy-primitives = { workspace = true, features = ["k256"] }
alloy-sol-types = { workspace = true, features = ["eip712-serde"] }
alloy-signer.workspace = true
alloy-signer-local.workspace = true
anyhow.workspace = true
aws-config = { version = "=1.5.9", optional = true }
aws-nitro-enclaves-nsm-api = { version = "=0.4.0", optional = true }
aws-sdk-kms = { version = "=1.50.0", optional = true }
aws-sdk-s3 = { version = "=1.62.0", optional = true }
aws-smithy-runtime = { version = "=1.7.3", features = [
    "client",
    "connector-hyper-0-14-x",
], optional = true }
aws-smithy-runtime-api = { version = "=1.7.3", optional = true }
aws-smithy-types = { version = "=1.2.9", optional = true }
bincode.workspace = true
# Needed for seed phrase generation for custodian backup. Project by "rust-bitcoin" that also make package `secp256k1` we use. 
# Package used by 6k+ projects, and project itself has 10+ developers, has CI enabled, but no statements regarding security. 
bip39 = { version = "=2.2.0", features = ["alloc"] }
bc2wrap.workspace = true
bytes.workspace = true
cbc = { version = "=0.1.2", features = ["alloc"] }
cfg-if.workspace = true
clap = { workspace = true, features = ["derive"] }
observability = { workspace = true, optional = true }
threshold-fhe = { workspace = true, default-features = false, features = [
    "extension_degree_4",
] }
enum_dispatch.workspace = true
futures-util.workspace = true
kms-grpc = { workspace = true, default-features = false }
hex.workspace = true
http = "=0.2.12"
hyper-rustls = { version = "=0.24.2", optional = true }
itertools.workspace = true
k256.workspace = true
lazy_static.workspace = true
nom = "=8.0.0"
rand = { workspace = true, features = ["std", "std_rng"] }
rasn = "=0.20.2"
rasn-cms = "=0.20.2"
rayon.workspace = true
rcgen = { workspace = true, optional = true }
rsa = { version = "=0.9.8", features = ["sha2", "serde"] }
serde = { workspace = true, features = ["derive", "rc"] }
signature = "=2.2.0"
strum.workspace = true
strum_macros.workspace = true
# experimental-force_fft_algo_dif4 feature ensure PBS is deterministic
tfhe = { workspace = true, features = [
    "boolean",
    "shortint",
    "integer",
    "zk-pok",
    "experimental-force_fft_algo_dif4",
    "extended-types",
] }
tokio = { workspace = true, features = [
    "macros",
    "rt-multi-thread",
], optional = true }
tokio-rustls = { workspace = true, optional = true }
tokio-util = { version = "=0.7.15", features = ["rt"] }
tonic = { workspace = true, optional = true }
tonic-health = { workspace = true, optional = true }
tonic-tls = { workspace = true, optional = true }
tower = { workspace = true, features = ["retry", "timeout"], optional = true }
tower-http = { workspace = true, features = ["trace"], optional = true }
tracing = { workspace = true, features = ["log"] }
trait-variant.workspace = true
url = { version = "=2.5.4", features = ["serde"] }
validator.workspace = true
ordermap = "=0.5.7"
x509-parser = { workspace = true, optional = true }

# [target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = { version = "=0.1.7" }
serde-wasm-bindgen = { version = "=0.6.5" }
wasm-bindgen = { version = "=0.2.100", features = ["serde-serialize"] }
tfhe-versionable.workspace = true
async_cell = "0.2.2"
thiserror.workspace = true
aes-gcm = { version = "=0.10.3", features = ["std"] }
ml-kem = "=0.2.1"

[dev-dependencies]
assert_cmd = "=2.0.17"
serial_test.workspace = true
sysinfo = "=0.35.1"
tempfile.workspace = true
tracing-test = "=0.2.5"
rstest = "=0.25.0"
# The testing feature is only required for tests
threshold-fhe = { workspace = true, default-features = false, features = [
    "testing", "malicious_strategies",
] }
backward-compatibility = { workspace = true, features = ["load", "tests"] }
proptest = "=1.6.0"
tests-utils = { path = "./tests-utils" }

[build-dependencies]
tonic-build.workspace = true

[features]
default = ["non-wasm"]
testing = []
non-wasm = [
    "threshold-fhe/non-wasm",
    "threshold-fhe/testing", # this is needed to build CLI for generating testing keys
    "kms-grpc/non-wasm",
    "dep:aws-config",
    "dep:aws-nitro-enclaves-nsm-api",
    "dep:aws-sdk-kms",
    "dep:aws-sdk-s3",
    "dep:aws-smithy-runtime",
    "dep:aws-smithy-runtime-api",
    "dep:aws-smithy-types",
    "dep:hyper-rustls",
    "dep:observability",
    "dep:rcgen",
    "dep:tokio",
    "dep:tokio-rustls",
    "dep:tonic",
    "dep:tonic-health",
    "dep:tonic-tls",
    "dep:tower",
    "dep:tower-http",
    "dep:x509-parser",
]
slow_tests = ["testing"]
wasm_tests = ["testing"]
s3_tests = ["testing"]
insecure = ["kms-grpc/insecure"]
