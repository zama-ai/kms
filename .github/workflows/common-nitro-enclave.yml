name: common-nitro-enclave

on:
  workflow_call:
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN:
        required: true
      CGR_USERNAME:
        required: true
      CGR_PASSWORD:
        required: true
    inputs:
      ref:
        type: string
        required: false
        default: ""
      working-directory:
        type: string
        required: true
      docker-context:
        type: string
        required: false
        default: "."
      image-name:
        type: string
        required: true
      image-enclave-name:
        type: string
        required: true
      push_image:
        type: boolean
        default: true
        required: false
      docker-file-enclave:
        type: string
        required: true
      cache-from:
        type: string
        required: false
        default: "type=gha"
      cache-to:
        type: string
        required: false
        default: "type=gha,mode=max"
    outputs:
      image_tag:
        description: "Docker Tag generated by this task"
        value: "${{ jobs.determine-tag.outputs.docker_tag }}"
      enclave_pcr0:
        description: "Enclave PCR0 generated by this task"
        value: "${{ jobs.build-and-push-enclave.outputs.enclave_pcr0 }}"
      enclave_pcr1:
        description: "Enclave PCR1 generated by this task"
        value: "${{ jobs.build-and-push-enclave.outputs.enclave_pcr1 }}"
      enclave_pcr2:
        description: "Enclave PCR2 generated by this task"
        value: "${{ jobs.build-and-push-enclave.outputs.enclave_pcr2 }}"

permissions: {}

jobs:
  determine-tag:
    permissions:
      actions: read # Required to read workflow run information
      contents: read # Required to checkout repository code
    name: common-nitro-enclave/determine-tag
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set Docker Tag
        id: set-tag
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          if [[ "${EVENT_NAME}" == "release" ]]; then
            echo "tag=${REF_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ "${EVENT_NAME}" == "schedule" ]]; then
            echo "tag=nightly-$(git rev-parse --short "$COMMIT_HASH")" >> "$GITHUB_OUTPUT"
          else
            echo "tag=$(git rev-parse --short "$COMMIT_HASH")" >> "$GITHUB_OUTPUT"
          fi

  build-and-push-enclave:
    permissions:
      actions: read # Required to read workflow run information
      contents: write # Required to publish packages
      attestations: write # Required to write attestations
      packages: write # Required to publish packages
      id-token: write # Required for OIDC token generation
    needs: determine-tag
    outputs:
      image: ${{ steps.push.outputs.image }}
      digest: ${{ steps.push.outputs.digest }}
      enclave_pcr0: ${{ steps.eif.outputs.eif_pcr0 }}
      enclave_pcr1: ${{ steps.eif.outputs.eif_pcr1 }}
      enclave_pcr2: ${{ steps.eif.outputs.eif_pcr2 }}
    name: common-nitro-enclave/build-and-push-enclave
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Get Rust version
        env:
          GH_WORKSPACE: ${{ github.workspace }}
        run: |
          version="$(cat "$GH_WORKSPACE/toolchain.txt")"
          echo "RUST_IMAGE_VERSION=$version" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          platforms: linux/amd64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo github event
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: echo "Github event ==> $EVENT_NAME"

      - name: Current branch sha
        if: github.event_name != 'release'
        env:
          EVENT_NAME: ${{ github.event_name }}
          COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          if [[ "${EVENT_NAME}" == "schedule" ]]; then
            echo "DOCKER_TAG_IMAGE=nightly-$(git rev-parse --short "$COMMIT_HASH")" >> "$GITHUB_ENV"
          else
            echo "DOCKER_TAG_IMAGE=$(git rev-parse --short "$COMMIT_HASH")" >> "$GITHUB_ENV"
          fi

      - name: Current Tag
        if: github.event_name == 'release'
        env:
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "DOCKER_TAG_IMAGE=${REF_NAME}" >> "$GITHUB_ENV"

      # Our self-hosted runner AMI doesn't ship jq which we need during EIF build
      - name: Install jq
        run: |
          sudo apt update && sudo apt -y install jq

      - name: Set EIF output dir
        env:
          WORKSPACE: ${{ github.workspace }}
          WORKING_DIRECTORY: ${{ inputs.working-directory }}
        run: |
          echo "EIF_OUTPUT_DIR=${WORKSPACE}/${WORKING_DIRECTORY}/eif-output" >> "$GITHUB_ENV"

      - name: Create EIF file
        uses: addnab/docker-run-action@4f65fabd2431ebc8d299f8e5a018d79a769ae185 #v3
        with:
          image: amazonlinux@sha256:5fe11d17e56571a26e20df3fa1493bdf9139fb9f2cb6d84fad13104c7b869217 # 2023.5.20240916.0
          options: -v ${{ env.EIF_OUTPUT_DIR }}:/output -v ${{ env.DOCKER_SOCK_PATH}}:/var/run/docker.sock # zizmor: ignore[template-injection]
          run: |
            dnf install aws-nitro-enclaves-cli aws-nitro-enclaves-cli-devel docker -y
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin # zizmor: ignore[template-injection]
            docker pull --platform=linux/amd64 ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }} # zizmor: ignore[template-injection]
            nitro-cli build-enclave --docker-uri ghcr.io/zama-ai/${{ inputs.image-name }}:${{ needs.determine-tag.outputs.docker_tag }} --name ${{ inputs.image-name }} --output-file /output/enclave.eif # zizmor: ignore[template-injection]
            nitro-cli describe-eif --eif-path /output/enclave.eif > /output/eif-info.txt

      - name: Export EIF measurements
        id: eif
        env:
          EIF_OUTPUT_DIR: ${{ env.EIF_OUTPUT_DIR }}
        run: |
          EIF_MEASUREMENT_PCR0=$(jq -r '.Measurements.PCR0' "$EIF_OUTPUT_DIR/eif-info.txt")
          EIF_MEASUREMENT_PCR1=$(jq -r '.Measurements.PCR1' "$EIF_OUTPUT_DIR/eif-info.txt")
          EIF_MEASUREMENT_PCR2=$(jq -r '.Measurements.PCR2' "$EIF_OUTPUT_DIR/eif-info.txt")
          {
            echo "eif_pcr0=${EIF_MEASUREMENT_PCR0}"
            echo "eif_pcr1=${EIF_MEASUREMENT_PCR1}"
            echo "eif_pcr2=${EIF_MEASUREMENT_PCR2}"
          } >> "$GITHUB_OUTPUT"

      - name: Docker Build and Push Enclave Image
        id: push
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: .
          secrets: BLOCKCHAIN_ACTIONS_TOKEN=${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
          build-args: |
            IMAGE_NAME=ghcr.io/zama-ai/${{ inputs.image-name }}
            IMAGE_TAG=${{ needs.determine-tag.outputs.docker_tag }}
            RUST_IMAGE_VERSION=${{ env.RUST_IMAGE_VERSION }}
          build-contexts: eif=${{ env.EIF_OUTPUT_DIR }}
          file: ${{ inputs.docker-file-enclave }}
          push: ${{ inputs.push_image }}
          pull: false
          tags: |
            ghcr.io/zama-ai/${{ inputs.image-enclave-name }}:${{ needs.determine-tag.outputs.docker_tag }}
            ghcr.io/zama-ai/${{ inputs.image-enclave-name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            zama.kms.version=${{ needs.determine-tag.outputs.docker_tag }}
            zama.kms.eif_pcr0=${{ steps.eif.outputs.eif_pcr0 }}
            zama.kms.eif_pcr1=${{ steps.eif.outputs.eif_pcr1 }}
            zama.kms.eif_pcr2=${{ steps.eif.outputs.eif_pcr2 }}

      - name: Export image name
        id: export-image
        env:
          IMAGE_NAME: ${{ inputs.image-name }}
          DOCKER_TAG: ${{ needs.determine-tag.outputs.docker_tag }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          echo "image=ghcr.io/zama-ai/${IMAGE_NAME}:${DOCKER_TAG}" >> "${GITHUB_OUTPUT}"
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

      ###########################################################
      # Release Part for EIF
      # EIF is only released on release events and added to the assets
      ###########################################################
      - name: Add eif-info.txt to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          files: |
            ${{ env.EIF_OUTPUT_DIR }}/eif-info.txt

  provenance-prod:
    name: common-nitro-enclave/provenance-prod
    permissions:
      actions: read # Required to read workflow run information
      attestations: write # Required to write attestations
      packages: write # Required to publish packages
      id-token: write # Required for OIDC token generation
    needs: [build-and-push-enclave]
    if: github.event_name == 'release'
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ghcr.io/zama-ai/${{ inputs.image-name }}
      digest: ${{ needs.build-and-push-enclave.outputs.digest }}
      registry-username: ${{ github.actor }}
      private-repository: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
