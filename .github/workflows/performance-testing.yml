##############################################################################
# Performance Testing Workflow
#
# This workflow runs performance tests for KMS in different deployment modes:
# - threshold: Standard threshold mode
# - thresholdWithEnclave: Threshold mode with Nitro Enclave security
#
# Triggers:
# - On pull requests
# - Scheduled runs (weekdays at midnight UTC)
# - Manual dispatch with configurable parameters
##############################################################################
name: performance-testing

on:
  pull_request:
  schedule:
    - cron: "0 0 * * 1-5" # Runs at midnight UTC (1 AM CET) Monday-Friday
  workflow_dispatch:
    inputs:
      deploymentType:
        description: "Deployment type"
        required: true
        default: "threshold"
        type: choice
        options:
          - "threshold"
          - "thresholdWithEnclave"
      kmsChartVersion:
        description: "KMS chart version"
        required: true
        default: "1.4.1"
        type: string
      tkmsInfraChartVersion:
        description: "TKMS Infra chart version"
        required: true
        default: "0.3.0"
        type: string
      dockerBuild:
        description: "Docker build"
        required: true
        type: boolean
        default: true
      kmsCoreImageTag:
        description: "KMS Core image tag (empty if dockerBuild is true)"
        required: false
        default: "empty if dockerBuild is true"
        type: string
      kmsCoreClientImageTag:
        description: "KMS Core client image tag (empty if dockerBuild is true)"
        required: false
        default: "empty if dockerBuild is true"
        type: string

permissions: {}

jobs:
  ############################################################################
  # Docker Build Job
  # Builds and publishes the Docker images required for testing
  ############################################################################
  docker-build:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.dockerBuild == true) || github.event_name == 'pull_request'
    name: docker-build
    runs-on: ubuntu-latest
    steps:
      - run: exit 0
    # permissions:
    #   actions: read # Required to read workflow run information
    #   contents: write # Required to checkout repository code
    #   id-token: write # Required for OIDC authentication
    #   pull-requests: read # Required to read pull request information
    #   packages: write # Required to publish Docker images
    #   attestations: write # Required to create build attestations
    # uses: ./.github/workflows/docker-build.yml
    # secrets:
    #   BLOCKCHAIN_ACTIONS_TOKEN: ${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
    #   AWS_ACCESS_KEY_S3_USER: ${{ secrets.AWS_ACCESS_KEY_S3_USER }}
    #   AWS_SECRET_KEY_S3_USER: ${{ secrets.AWS_SECRET_KEY_S3_USER }}
    #   SLAB_ACTION_TOKEN: ${{ secrets.SLAB_ACTION_TOKEN }}
    #   SLAB_BASE_URL: ${{ secrets.SLAB_BASE_URL }}
    #   JOB_SECRET: ${{ secrets.JOB_SECRET }}
    #   CGR_USERNAME: ${{ secrets.CGR_USERNAME }}
    #   CGR_PASSWORD: ${{ secrets.CGR_PASSWORD }}

  ############################################################################
  # Performance Testing Job
  # Runs performance tests for KMS in different deployment modes
  ############################################################################
  performance-testing:
    name: performance-testing
    needs: docker-build
    if: always() && !cancelled()
    runs-on: ubuntu-latest

    # Environment variables used throughout the job
    env:
      NAMESPACE: "kms-ci"
      DEPLOYMENT_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.deploymentType || 'threshold' }}
      KMS_CHART_VERSION: ${{ github.event_name == 'workflow_dispatch' && inputs.kmsChartVersion || '1.4.1' }}
      TKMS_INFRA_CHART_VERSION: ${{ github.event_name == 'workflow_dispatch' && inputs.tkmsInfraChartVersion || '0.3.0' }}
      SYNC_SECRETS_CHART_VERSION: "0.2.1"

    steps:
      # ======================================================================
      # DOCKER BUILD STATUS HANDLING
      # ======================================================================
      - name: Check if docker build failed
        if: ${{ needs.docker-build.result == 'failure' }}
        run: |
          ###################################################################
          # DOCKER BUILD FAILED - Exit with error
          ###################################################################
          exit 1

      - name: Login to zws GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ZWS_BOT_TOKEN }}

      - name: Check if docker build succeeded
        if: ${{ needs.docker-build.result == 'success' }}
        env:
          DEPLOYMENT_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.deploymentType || 'thresholdWithEnclave' }}
          # KMS_CORE_IMAGE_TAG: ${{ inputs.kmsCoreImageTag }}
          KMS_CORE_IMAGE_TAG: 16be27d
          # KMS_CORE_CLIENT_IMAGE_TAG: ${{ inputs.kmsCoreClientImageTag }}
          KMS_CORE_CLIENT_IMAGE_TAG: 16be27d
        run: |
          ###################################################################
          # DOCKER BUILD SUCCEEDED - Set up environment for new images
          # This handles both scheduled and manual runs with dockerBuild=true
          ###################################################################
          # Set deployment type, defaulting to thresholdWithEnclave if not specified
          # Use the newly built image tags
          {
            echo "DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE}"
            echo "KMS_CORE_IMAGE_TAG=${KMS_CORE_IMAGE_TAG}"
            echo "KMS_CORE_CLIENT_IMAGE_TAG=${KMS_CORE_CLIENT_IMAGE_TAG}"
          } >> "$GITHUB_ENV"

          # For enclave deployments, extract PCR measurements
          if [[ ${DEPLOYMENT_TYPE} == "thresholdWithEnclave" ]]; then
            echo "Extracting PCR measurements for enclave attestation..."
            docker pull ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}"
            PCR0=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr0"]')
            PCR1=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr1"]')
            PCR2=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr2"]')
            {
              echo "PCR0=${PCR0}"
              echo "PCR1=${PCR1}"
              echo "PCR2=${PCR2}"
            } >> "$GITHUB_ENV"
          fi

      - name: Handle pre-built images
        if: ${{ needs.docker-build.result == 'skipped' && github.event_name == 'workflow_dispatch' && inputs.dockerBuild == false && inputs.kmsCoreImageTag != '' && inputs.kmsCoreClientImageTag != '' }}
        env:
          DEPLOYMENT_TYPE: ${{ github.event_name == 'workflow_dispatch' && inputs.deploymentType || 'thresholdWithEnclave' }}
          # KMS_CORE_IMAGE_TAG: ${{ inputs.kmsCoreImageTag }}
          KMS_CORE_IMAGE_TAG: 16be27d
          # KMS_CORE_CLIENT_IMAGE_TAG: ${{ inputs.kmsCoreClientImageTag }}
          KMS_CORE_CLIENT_IMAGE_TAG: 16be27d
        run: |
          ###################################################################
          # USING PRE-BUILT IMAGES
          # This handles manual runs with dockerBuild=false, using provided tags
          ###################################################################
          echo "Using pre-built images with tags:"
          {
            echo "DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE}"
            echo "KMS_CORE_IMAGE_TAG=${KMS_CORE_IMAGE_TAG}"
            echo "KMS_CORE_CLIENT_IMAGE_TAG=${KMS_CORE_CLIENT_IMAGE_TAG}"
          } >> "$GITHUB_ENV"

          if [[ ${DEPLOYMENT_TYPE} == "thresholdWithEnclave" ]]; then
            echo "Extracting PCR measurements for provided enclave image..."
            docker pull ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}"
            PCR0=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr0"]')
            PCR1=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr1"]')
            PCR2=$(docker inspect ghcr.io/zama-ai/kms/core-service-enclave:"${KMS_CORE_IMAGE_TAG}" | jq -r '.[0].Config.Labels["zama.kms.eif_pcr2"]')
            {
              echo "PCR0=${PCR0}"
              echo "PCR1=${PCR1}"
              echo "PCR2=${PCR2}"
            } >> "$GITHUB_ENV"
          fi

      - name: Set up path suffix based on deployment type
        run: |
          ###################################################################
          # Set up path suffix based on deployment type
          ###################################################################
          if [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            echo "Using enclave-enabled configuration..."
            echo "PATH_SUFFIX=kms-enclave-ci" >> "$GITHUB_ENV"
          else
            echo "Using standard threshold configuration..."
            echo "PATH_SUFFIX=kms-ci" >> "$GITHUB_ENV"
          fi

      # ======================================================================
      # TOOLING SETUP
      # ======================================================================
      - name: Setup tailscale
        uses: tailscale/github-action@84a3f23bb4d843bcf4da6cf824ec1be473daf4de # v3.2.3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:${NAMESPACE}

      - name: Setup helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          export PATH=$PATH:/usr/local/bin

      - name: Setup argo workflow CLI
        env:
          ARGO_OS: "${{ runner.os }}"
          ARGO_VERSION: "v3.7.2"
        run: |
          # Detect OS
          if [[ "$(uname -s)" != "Darwin" ]]; then
            ARGO_OS="linux"
          fi
          # Download the binary
          curl -sLO "https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-${ARGO_OS}-amd64.gz"
          # Unzip
          gunzip "argo-${ARGO_OS}-amd64.gz"
          # Make binary executable
          chmod +x "argo-${ARGO_OS}-amd64"
          # Move binary to path
          mv "./argo-${ARGO_OS}-amd64" /usr/local/bin/argo
          # Test installation
          argo version

      # ======================================================================
      # KUBERNETES & HELM SETUP
      # ======================================================================
      - name: Setup kubeconfig
        run: |
          ###################################################################
          # Configure kubeconfig to connect to the Tailscale Kubernetes cluster
          ###################################################################
          echo "Configuring kubeconfig for Tailscale cluster..."
          tailscale configure kubeconfig tailscale-operator-zws-dev.diplodocus-boa.ts.net

      - name: Setup environment variable
        run: |
          ###################################################################
          # Initialize any additional environment variables
          ###################################################################
          echo "Initializing environment variables..."

      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set kubeconfig
        run: |
          ###################################################################
          # Verify and set the Kubernetes context
          ###################################################################
          echo "Available Kubernetes contexts:"
          kubectl config get-contexts
          echo "Setting context to Tailscale cluster..."
          kubectl config use-context tailscale-operator-zws-dev.diplodocus-boa.ts.net

      # ======================================================================
      # REGISTRY & SECRETS CONFIGURATION
      # ======================================================================
      - name: Setup registry credentials secrets
        run: |
          ###################################################################
          # Deploy sync-secrets to manage registry credentials
          ###################################################################
          echo "Deploying sync-secrets for registry credentials..."
          helm upgrade --install sync-secrets \
            oci://ghcr.io/zama-zws/helm-charts/sync-secrets \
            --namespace "${NAMESPACE}" \
            --version "${SYNC_SECRETS_CHART_VERSION:-"0.2.1"}" \
            --values ./ci/kube-testing/threshold/kms-ci/registry-credential/values-kms-ci.yaml

      # ======================================================================
      # TKMS INFRASTRUCTURE DEPLOYMENT
      # ======================================================================
      - name: Setup tkms-infra
        run: |
          ###################################################################
          # Deploy TKMS infrastructure based on deployment type
          ###################################################################
          if [[ "${DEPLOYMENT_TYPE}" == "threshold" ]]; then
            echo "Deploying standard threshold infrastructure..."
            helm upgrade --install tkms-infra \
              oci://ghcr.io/zama-zws/crossplane/tkms-infra \
              --namespace "${NAMESPACE}" \
              --version "${TKMS_INFRA_CHART_VERSION}" \
              --values ./ci/kube-testing/threshold/kms-ci/tkms-infra/values-"${PATH_SUFFIX}".yaml

          elif [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            echo "Deploying threshold infrastructure with enclave support..."
            helm upgrade --install tkms-infra \
              oci://ghcr.io/zama-zws/crossplane/tkms-infra \
              --namespace "${NAMESPACE}" \
              --version "${TKMS_INFRA_CHART_VERSION}" \
              --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/tkms-infra/values-"${PATH_SUFFIX}".yaml \
              --set kmsParties.awsKms.recipientAttestationImageSHA384="${PCR0}"
          fi

      - name: Wait tkms-infra to be ready
        run: |
          ###################################################################
          # Wait for TKMS infrastructure components to be ready
          ###################################################################
          echo "Waiting for KMS parties to be ready..."
          for i in {1..13}; do
            kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-"${i}" \
              -n "${NAMESPACE}" --timeout=120s
          done

          if [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            echo "Waiting for enclave node groups to be ready..."
            kubectl wait --for=condition=ready enclavenodegroups \
              -l crossplane.io/claim-namespace="${NAMESPACE}" \
              -n "${NAMESPACE}" --timeout=120s
          fi

      # ======================================================================
      # KMS CORE DEPLOYMENT
      # ======================================================================
      - name: Setup kms-core with 13 parties
        run: |
          ###################################################################
          # Deploy KMS Core in threshold mode (standard)
          ###################################################################
          if [[ "${DEPLOYMENT_TYPE}" == "threshold" ]]; then
            echo "Deploying KMS Core in threshold mode across 13 parties..."
            for i in {1..13}; do
              echo "Deploying KMS Core party ${i}/13..."
              helm upgrade --install kms-service-threshold-"${i}"-"${NAMESPACE}" \
                oci://ghcr.io/zama-ai/kms/charts/kms-core \
                --namespace "${NAMESPACE}" \
                --version "${KMS_CHART_VERSION}" \
                --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-"${PATH_SUFFIX}".yaml \
                --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-"${i}"-"${PATH_SUFFIX}".yaml \
                --set kmsCoreClient.image.tag="${KMS_CORE_CLIENT_IMAGE_TAG}" \
                --set kmsCore.image.tag="${KMS_CORE_IMAGE_TAG}"
            done

          ###################################################################
          # Deploy KMS Core in threshold mode with enclave
          ###################################################################
          elif [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            echo "Deploying KMS Core in threshold mode with enclave support across 13 parties..."
            for i in {1..13}; do
              echo "Deploying KMS Core party ${i}/13 with enclave attestation..."
              helm upgrade --install kms-core-"${i}" \
                oci://ghcr.io/zama-ai/kms/charts/kms-core \
                --namespace "${NAMESPACE}" \
                --version "${KMS_CHART_VERSION}" \
                --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-"${PATH_SUFFIX}".yaml \
                --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-"${i}"-"${PATH_SUFFIX}".yaml \
                --set kmsCoreClient.image.tag="${KMS_CORE_CLIENT_IMAGE_TAG}" \
                --set kmsCore.image.tag="${KMS_CORE_IMAGE_TAG}" \
                --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr0="${PCR0}" \
                --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr1="${PCR1}" \
                --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr2="${PCR2}"
            done
          fi

          ###################################################################
          # Wait for KMS Core deployment to be ready
          ###################################################################
          echo "Waiting for KMS Core pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=kms-core \
            -n "${NAMESPACE}" --timeout=600s

          ###################################################################
          # Deploy KMS Core initialization job
          ###################################################################
          echo "Deploying KMS Core initialization job..."
          helm upgrade --install kms-core-init \
            oci://ghcr.io/zama-ai/kms/charts/kms-core \
            --namespace "${NAMESPACE}" \
            --version "${KMS_CHART_VERSION}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-init-"${PATH_SUFFIX}".yaml \
            --set kmsCoreClient.image.tag="${KMS_CORE_CLIENT_IMAGE_TAG}" \
            --set kmsCore.image.tag="${KMS_CORE_IMAGE_TAG}"

          ###################################################################
          # Wait for KMS Core initialization to complete
          ###################################################################
          echo "Waiting for KMS Core initialization to complete..."
          kubectl wait --for=condition=complete job -l app=kms-threshold-init-job \
            -n "${NAMESPACE}" --timeout=600s

          ###################################################################
          # Deploy KMS Core key generation job
          ###################################################################
          echo "Deploying KMS Core key generation job..."
          helm upgrade --install kms-core-gen-keys \
            oci://ghcr.io/zama-ai/kms/charts/kms-core \
            --namespace "${NAMESPACE}" \
            --version "${KMS_CHART_VERSION}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-gen-keys-"${PATH_SUFFIX}".yaml \
            --set kmsCoreClient.image.tag="${KMS_CORE_CLIENT_IMAGE_TAG}" \
            --set kmsCore.image.tag="${KMS_CORE_IMAGE_TAG}" \
            --wait \
            --wait-for-jobs \
            --timeout=1200s

          ###################################################################
          # Wait for key generation to complete
          ###################################################################
          echo "Waiting for key generation to complete..."
          kubectl wait --for=condition=complete job -l app=kms-core-client-gen-keys \
            -n "${NAMESPACE}" --timeout=600s

      # ======================================================================
      # PERFORMANCE TESTING
      # ======================================================================
      - name: Run performance testing
        run: |
          ###################################################################
          # Prepare and execute Argo workflow for performance testing
          ###################################################################
          echo "Starting performance testing workflow..."

          # Update the workflow template with the current image tag
          echo "Updating workflow template with image tag: ${IMAGE_TAG}"
          sed -i "s/<version>/${IMAGE_TAG}/g" \
            ./ci/kube-testing/argo-workflow/test-suite-workflow-"${PATH_SUFFIX}"-req-by-step.yaml

          echo "Submitting Argo workflow..."
          argo submit -n argo \
            ./ci/kube-testing/argo-workflow/test-suite-workflow-"${PATH_SUFFIX}"-req-by-step.yaml

          echo "Streaming workflow logs..."
          argo logs @latest -f -n "${NAMESPACE}"

      # ======================================================================
      # LOG COLLECTION
      # ======================================================================
      - name: Get logs from kms-core
        if: always()
        run: |
          ###################################################################
          # Collect logs from all KMS Core pods for debugging
          ###################################################################
          echo "Collecting logs from KMS Core pods..."
          for i in {1..13}; do
            echo "Collecting logs from KMS Core pod ${i}/13..."
            POD_NAME="kms-service-threshold-${i}-${NAMESPACE}-core-${i}"
            LOG_FILE="kms-core-${i}-logs.txt"

            # Get pod logs and save to file
            if kubectl get pod "${POD_NAME}" -n "${NAMESPACE}" &> /dev/null; then
              kubectl logs "${POD_NAME}" -c kms-core -n "${NAMESPACE}" > "${LOG_FILE}"
              echo "  ✅ Logs saved to ${LOG_FILE}"
            else
              echo "  ⚠️ Pod ${POD_NAME} not found, skipping log collection"
              touch "${LOG_FILE}"  # Create empty file to prevent workflow failure
            fi
          done

      - name: Upload kms-core logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: kms-core-logs
          path: kms-core-*.txt
          retention-days: 7 # Keep logs for 7 days
          if-no-files-found: warn # Only warn if no log files are found

      # ======================================================================
      # CLEANUP
      # ======================================================================
      - name: Cleanup
        if: always()
        run: |
          ###################################################################
          # Clean up all resources to avoid unnecessary costs
          ###################################################################
          echo "Starting cleanup of KMS resources..."

          # Uninstall KMS Core instances
          echo "Uninstalling KMS Core instances..."
          for i in {1..13}; do
            echo "Uninstalling KMS Core instance ${i}/13..."
            helm uninstall "kms-service-threshold-${i}-${NAMESPACE}" -n "${NAMESPACE}" || true
          done

          # Clean up ConfigMaps
          echo "Cleaning up ConfigMaps..."
          kubectl delete cm -l app=kms-core -n "${NAMESPACE}" || true
          kubectl delete cm -l app=kms-core-client -n "${NAMESPACE}" || true
          kubectl delete cm kms-keys -n "${NAMESPACE}" || true

          # Clean up StatefulSets
          echo "Cleaning up StatefulSets..."
          kubectl delete sts -l app=kms-core-client -n "${NAMESPACE}" || true

          # Clean up Jobs
          echo "Cleaning up Jobs..."
          kubectl delete job -l app=kms-core-client-gen-keys -n "${NAMESPACE}" || true
          kubectl delete job -l app=kms-threshold-init-job -n "${NAMESPACE}" || true

          # Uninstall Helm releases
          echo "Uninstalling Helm releases..."
          helm uninstall kms-core-gen-keys -n "${NAMESPACE}" || true
          helm uninstall kms-core-init -n "${NAMESPACE}" || true
          helm uninstall tkms-infra -n "${NAMESPACE}" || true
          helm uninstall sync-secrets -n "${NAMESPACE}" || true

          echo "✅ Cleanup completed successfully"
