name: performance-testing

on:
  pull_request:
  schedule:
    - cron: "0 0 * * 1-5" # Runs at midnight UTC (1 AM CET) Monday-Friday
  workflow_dispatch:
    inputs:
      deploymentType:
        description: "Deployment type"
        required: true
        default: "threshold"
        type: choice
        options:
          - "centralized"
          - "centralizedWithEnclave"
          - "threshold"
          - "thresholdWithEnclave"
      kmsChartVersion:
        description: "KMS chart version"
        required: true
        default: "1.3.0"
        type: string
      tkmsInfraChartVersion:
        description: "TKMS Infra chart version"
        required: true
        default: "0.3.0"
        type: string

permissions: {}

jobs:
  docker-build:
    name: docker-build
    permissions:
      actions: read # Required to read workflow run information
      contents: write # Required to checkout repository code
      id-token: write # Required for OIDC authentication
      pull-requests: read # Required to read pull request information
      packages: write # Required to publish Docker images
      attestations: write # Required to create build attestations
    uses: ./.github/workflows/docker-build.yml
    secrets:
      BLOCKCHAIN_ACTIONS_TOKEN: ${{ secrets.BLOCKCHAIN_ACTIONS_TOKEN }}
      AWS_ACCESS_KEY_S3_USER: ${{ secrets.AWS_ACCESS_KEY_S3_USER }}
      AWS_SECRET_KEY_S3_USER: ${{ secrets.AWS_SECRET_KEY_S3_USER }}
      SLAB_ACTION_TOKEN: ${{ secrets.SLAB_ACTION_TOKEN }}
      SLAB_BASE_URL: ${{ secrets.SLAB_BASE_URL }}
      JOB_SECRET: ${{ secrets.JOB_SECRET }}
      CGR_USERNAME: ${{ secrets.CGR_USERNAME }}
      CGR_PASSWORD: ${{ secrets.CGR_PASSWORD }}

  performance-testing:
    name: performance-testing
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      NAMESPACE: "kms-ci"
      # DEPLOYMENT_TYPE: ${{ inputs.deploymentType }}
      DEPLOYMENT_TYPE: "threshold"
      KMS_CHART_VERSION: ${{ inputs.kmsChartVersion }}
      TKMS_INFRA_CHART_VERSION: ${{ inputs.tkmsInfraChartVersion }}
      SYNC_SECRETS_CHART_VERSION: "0.2.1"
      IMAGE_TAG: ${{ needs.docker-build.outputs.image_tag }}
      PCR0: ${{ needs.docker-build.outputs.enclave_pcr0 }}
      PCR1: ${{ needs.docker-build.outputs.enclave_pcr1 }}
      PCR2: ${{ needs.docker-build.outputs.enclave_pcr2 }}
    steps:
      ################################################################
      # SET UP REQUIRED TOOLS
      #
      - name: Setup tailscale
        uses: tailscale/github-action@84a3f23bb4d843bcf4da6cf824ec1be473daf4de # v3.2.3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:${NAMESPACE}

      - name: Setup helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          export PATH=$PATH:/usr/local/bin

      - name: Setup argo workflow CLI
        env:
          ARGO_OS: "${{ runner.os }}"
          ARGO_VERSION: "v3.7.2"
        run: |
          # Detect OS
          if [[ "$(uname -s)" != "Darwin" ]]; then
            ARGO_OS="linux"
          fi
          # Download the binary
          curl -sLO "https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-${ARGO_OS}-amd64.gz"
          # Unzip
          gunzip "argo-${ARGO_OS}-amd64.gz"
          # Make binary executable
          chmod +x "argo-${ARGO_OS}-amd64"
          # Move binary to path
          mv "./argo-${ARGO_OS}-amd64" /usr/local/bin/argo
          # Test installation
          argo version

      - name: Setup kubeconfig
        run: |
          tailscale configure kubeconfig tailscale-operator-zws-dev.diplodocus-boa.ts.net

      ################################################################
      # SET UP ENVIRONMENT
      - name: Checkout Project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set kubeconfig
        run: |
          kubectl config get-contexts
          kubectl config use-context tailscale-operator-zws-dev.diplodocus-boa.ts.net

      - name: Login to zws GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ZWS_BOT_TOKEN }}

      - name: Setup registry credentials secrets
        run: |
          helm install sync-secrets oci://ghcr.io/zama-zws/helm-charts/sync-secrets \
          --namespace "${NAMESPACE}" \
          --version "${SYNC_SECRETS_CHART_VERSION:-"0.2.1"}"

      # - name: Setup slack webhook secrets
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   run: |
      #     kubectl create secret generic slack-webhook \
      #     --from-literal=url=${{ secrets.SLACK_WEBHOOK_URL }} \
      #     --namespace kms-ci

      - name: Setup tkms-infra
        run: |
          if [[ "${DEPLOYMENT_TYPE}" == "threshold" ]]; then
            helm install tkms-infra oci://ghcr.io/zama-zws/crossplane/tkms-infra \
            --namespace "${NAMESPACE}" \
            --version "${TKMS_INFRA_CHART_VERSION:-"0.3.0"}" \
            --values ./ci/kube-testing/threshold/kms-ci/tkms-infra/values-kms-ci.yaml
          fi
          if [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            helm install tkms-infra oci://ghcr.io/zama-zws/crossplane/tkms-infra \
            --namespace "${NAMESPACE}" \
            --version "${TKMS_INFRA_CHART_VERSION:-"0.3.0"}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/tkms-infra/values-kms-ci.yaml \
            --set kmsParties.awsKms.recipientAttestationImageSHA384="${PCR0}"
          fi

      - name: Wait tkms-infra to be ready
        run: |
          # WAIT FOR DEPLOYMENT OF TKMS INFRA IS DONE
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-1 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-2 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-3 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-4 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-5 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-6 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-7 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-8 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-9 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-10 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-11 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-12 -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready Kmsparties kms-party-kms-ci-13 -n "${NAMESPACE}" --timeout=120s
          if [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            kubectl wait --for=condition=ready enclavenodegroups -l crossplane.io/claim-namespace="${NAMESPACE}" -n "${NAMESPACE}" --timeout=120s
          fi

      - name: Login to zama.ai GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup kms-core with 13 parties
        run: |
          if [[ "${DEPLOYMENT_TYPE}" == "threshold" ]]; then
            helm install kms-core oci://ghcr.io/zama-ai/kms/kms-core \
            --namespace "${NAMESPACE}" \
            --version "${KMS_CHART_VERSION:-"1.3.0"}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-gen-keys-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-init-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-1-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-2-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-3-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-4-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-5-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-6-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-7-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-8-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-9-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-10-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-11-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-12-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-13-kms-ci.yaml \
            --set kmsCoreClient.image.tag="${IMAGE_TAG}" \
            --set kmsCore.image.tag="${IMAGE_TAG}"
          fi
          if [[ "${DEPLOYMENT_TYPE}" == "thresholdWithEnclave" ]]; then
            helm install kms-core oci://ghcr.io/zama-ai/kms/kms-core \
            --namespace "${NAMESPACE}" \
            --version "${KMS_CHART_VERSION:-"1.3.0"}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-gen-keys-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-init-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-1-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-2-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-3-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-4-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-5-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-6-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-7-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-8-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-9-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-10-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-11-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-12-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-threshold-13-kms-ci.yaml \
            --set kmsCoreClient.image.tag="${IMAGE_TAG}" \
            --set kmsCore.image.tag="${IMAGE_TAG}" \
            --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr0="${PCR0}" \
            --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr1="${PCR1}" \
            --set kmsCore.thresholdMode.tls.trustedReleases[0].pcr2="${PCR2}"
          fi
          if [[ "${DEPLOYMENT_TYPE}" == "centralized" ]]; then
            helm install kms-core oci://ghcr.io/zama-ai/kms/kms-core \
            --namespace "${NAMESPACE}" \
            --version "${KMS_CHART_VERSION:-"1.3.0"}" \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-gen-keys-kms-ci.yaml \
            --values ./ci/kube-testing/"${DEPLOYMENT_TYPE}"/kms-ci/kms-service/values-kms-service-init-kms-ci.yaml \
            --set kmsCoreClient.image.tag="${IMAGE_TAG}" \
            --set kmsCore.image.tag="${IMAGE_TAG}"
          fi

      - name: Wait kms-core to be ready
        run: |
          kubectl wait --for=condition=complete job -l app=kms-threshold-init-job -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=complete job -l app=kms-core-client-gen-keys -n "${NAMESPACE}" --timeout=120s
          kubectl wait --for=condition=ready pod -l app=kms-core -n "${NAMESPACE}" --timeout=120s

      - name: Run performance testing
        run: |
          sed -i "s/<version>/${IMAGE_TAG}/g" ./ci/kube-testing/argo-workflow/test-suite-workflow-kms-ci-req-by-step.yaml
          argo submit -n argo ./ci/kube-testing/argo-workflow/test-suite-workflow-kms-ci-req-by-step.yaml --log

      - name: Cleanup
        if: always()
        run: |
          helm uninstall kms-core -n "${NAMESPACE}"
          helm uninstall tkms-infra -n "${NAMESPACE}"
          helm uninstall sync-secrets -n "${NAMESPACE}"
