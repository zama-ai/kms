{{- if .Values.kmsCoreClient.enabled -}}
{{- $peersIDList := untilStep (include "kmsPeersStartID" . | int) (.Values.kmsPeers.count | add1 | int) 1  }}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: kms-core-client
  name: {{ include "kmsCoreClientName" . }}-config
data:
  load-core-client-config.sh: |
    #!/usr/bin/env sh
    set -e
    echo "loading configuration from env vars into the config.toml file"

    # Process the S3 endpoint if it contains a variable
    if echo "$S3_ENDPOINT" | grep -q '\$'; then
        S3_ENDPOINT=$(eval echo "$S3_ENDPOINT")
    fi

    if [ -n "${CORE_CLIENT__S3_ENDPOINT}" ]; then
      S3_ENDPOINT="${CORE_CLIENT__S3_ENDPOINT}"
    fi

    cat <<EOF >>config.toml
    s3_endpoint="${S3_ENDPOINT}"
    object_folder=${OBJECT_FOLDER}
    core_addresses=${CORE_ADDRESSES}
    num_majority=${NUM_MAJORITY}
    num_reconstruct=${NUM_RECONSTRUCT}
    decryption_mode=${DECRYPTION_MODE}
    fhe_params=${FHE_PARAMETER:=Test}

    ########################################################################
    # Config for a threshold deployment of n=4 cores with threshold t=1
    # The type of the KMS ("centralized" or "threshold")
    kms_type = "threshold"

    # The minimum number of matching responses required to have an honest majority
    num_majority=${NUM_MAJORITY}

    # The minimum number of responses required to reconstruct a value (e.g. in user decryption)
    num_reconstruct=${NUM_RECONSTRUCT}

    # Decryption mode used in user decryption reconstruction.
    # Options are NoiseFloodSmall and BitDecSmall.
    # Must match the deployed core/service setting!
    # Only relevant for threshold.
    decryption_mode=${DECRYPTION_MODE}

    # fhe_params = "Test" # Small, insecure parameters for testing
    fhe_params=${FHE_PARAMETER:=Test} # Large, secure parameters

    {{ if .Values.kmsCore.thresholdMode.enabled -}}
    # List of connection info to each of the cores
    [[cores]]
    # The ID of the given KMS server (monotonically increasing positive integer starting at 1)
    party_id = 1
    # The address of the given KMS server, including the port
    address = "localhost:50100"
    # The S3 endpoint where the public material of the given server can be reached
    s3_endpoint = "http://localhost:9000/kms"
    # The folder at the S3 endpoint where the data is stored
    object_folder = "PUB-p1"

    [[cores]]
    party_id = 2
    address = "localhost:50200"
    s3_endpoint = "http://localhost:9000/kms/"
    object_folder = "PUB-p2"

    [[cores]]
    party_id = 3
    address = "localhost:50300"
    s3_endpoint = "http://localhost:9000/kms"
    object_folder = "PUB-p3"

    [[cores]]
    party_id = 4
    address = "localhost:50400"
    s3_endpoint = "http://localhost:9000/kms"
    object_folder = "PUB-p4"
    {{- else }}
    {{- range $i := $peersIDList }}
    [[cores]]
    party_id = {{ int $i }}
    address = {{ (printf "%s-%d" $kmsCoreClientName $i) | quote }}
    s3_endpoint = "http://localhost:9000/kms"
    object_folder = "PUB-p{{ int $i }}"
    {{- end }}
    {{- end }}
    EOF

    # Keep the pod running
    tail -f /dev/null

  load-core-client-testing-config.sh: |
    #!/usr/bin/env sh
    set -e

    echo "loading configuration from env vars into the config.toml file"

    # Process the S3 endpoint if it contains a variable
    if echo "$S3_ENDPOINT" | grep -q '\$'; then
        S3_ENDPOINT=$(eval echo "$S3_ENDPOINT")
    fi

    if [ -n "${CORE_CLIENT__S3_ENDPOINT}" ]; then
      S3_ENDPOINT="${CORE_CLIENT__S3_ENDPOINT}"
    fi

    cat <<EOF >>config.toml
    s3_endpoint="${S3_ENDPOINT}"
    object_folder=${OBJECT_FOLDER}
    core_addresses=${CORE_ADDRESSES}
    num_majority=${NUM_MAJORITY}
    num_reconstruct=${NUM_RECONSTRUCT}
    decryption_mode=${DECRYPTION_MODE}
    fhe_params=${FHE_PARAMETER:=Test}
    EOF

    {{- range .Values.kmsCoreClientTesting.shell_command }}
    {{ . }}
    {{- end }}

{{- end -}}
