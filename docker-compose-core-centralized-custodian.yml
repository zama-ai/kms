name: zama-core-centralized-custodian

services:

  # KMS-Core-centralized
  # TODO: move the upload of the pub-key from the validator to the core -> or maybe the connector?
  # anyway where the keys really are
  dev-kms-core:
    image: ghcr.io/zama-ai/kms/core-service:latest-dev
    environment:
      - DOCKER_BUILDKIT=1
      # Observe there is no field called `enabled` in the SecretSharingKeychain structure,
      # but it seems it is the only way we can set the SecretSharingKeychain structure through environment variables
      - KMS_CORE__BACKUP_VAULT__KEYCHAIN__SECRET_SHARING__ENABLED=true
    build:
      context: .
      target: dev
      dockerfile: ./docker/core/service/Dockerfile
      cache_from:
        - ghcr.io/zama-ai/kms/core-service:latest-dev
      args:
        LTO_RELEASE: ${LTO_RELEASE}
        RUST_IMAGE_VERSION: ${RUST_IMAGE_VERSION}
    env_file:
      - "docker-compose-kms-core.env"
    ports:
      - "50051:50051"
    healthcheck:
      test: "grpc_health_probe --addr=localhost:50051"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    volumes:
      - minio_secrets:/minio_secrets
      - ./core/service/config/:/app/kms/core/service/config
    entrypoint: >
      /bin/sh -c "
      export AWS_ACCESS_KEY_ID=$$(cat /minio_secrets/access_key) &&
      export AWS_SECRET_ACCESS_KEY=$$(cat /minio_secrets/secret_key) &&
      echo 'Generating signing keys' &&
      kms-gen-keys --public-storage s3 --public-s3-bucket kms --aws-s3-endpoint http://dev-s3-mock:9000 --aws-region us-east-1 --private-storage file --private-file-path ./keys --cmd signing-keys centralized &&
      echo 'Starting kms service' &&
      kms-server --config-file config/compose_centralized.toml
      "
    depends_on:
      dev-s3-mock-setup:
        condition: service_completed_successfully
