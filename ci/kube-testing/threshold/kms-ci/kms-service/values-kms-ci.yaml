kmsPeers:
  # Number of replicas managed by each statefulset
  count: 1
kmsConnector:
  enabled: false
kmsCoreClient:
  enabled: false
  envFrom:
    configmap:
      name: kms-ci-1
  image:
    tag: <version>

kmsCore:
  image:
    name: ghcr.io/zama-ai/kms/core-service
    tag: <version>

  envFrom:
    configmap:
      key:
        coreClientS3Endpoint: CORE_CLIENT__S3_ENDPOINT
        privateVaultStorageBucket: KMS_CORE__PRIVATE_VAULT__STORAGE__S3__BUCKET
        privateVaultStoragePrefix: KMS_CORE__PRIVATE_VAULT__STORAGE__S3__PREFIX
        privateVaultKeychainAWSKMSRootKeySpec: KMS_CORE__PRIVATE_VAULT__KEYCHAIN__AWS_KMS__ROOT_KEY_SPEC
        privateVaultKeychainAWSKMSRootKeyID: KMS_CORE__PRIVATE_VAULT__KEYCHAIN__AWS_KMS__ROOT_KEY_ID
        publicVaultStorageBucket: KMS_CORE__PUBLIC_VAULT__STORAGE__S3__BUCKET
        publicVaultStoragePrefix: KMS_CORE__PUBLIC_VAULT__STORAGE__S3__PREFIX
        backupVaultStorageBucket: KMS_CORE__BACKUP_VAULT__STORAGE__S3__BUCKET
        backupVaultStoragePrefix: KMS_CORE__BACKUP_VAULT__STORAGE__S3__PREFIX
        backupVaultKeychainAWSKMSRootKeySpec: KMS_CORE__BACKUP_VAULT__KEYCHAIN__AWS_KMS__ROOT_KEY_SPEC
        backupVaultKeychainAWSKMSRootKeyID: KMS_CORE__BACKUP_VAULT__KEYCHAIN__AWS_KMS__ROOT_KEY_ID
  rateLimiter:
    bucketSize: 50000
  thresholdMode:
    enabled: true
    tls:
      enabled: false
    thresholdValue: 4 # 1 if 4 parties or 4 if 13 parties
    numSessionsPreproc: 72
    multiplier: 2.0
    maxInterval: 60
    initialIntervalMs: 100
    cleanupIntervalSecs: 2
    rayonNumThreads: 40
    tokioWorkerThreads: 24
    initializationScript:
      enabled: true
    peersList:
      - id: 1
        host: kms-service-threshold-1-kms-ci-core-1
        port: 50001
      - id: 2
        host: kms-service-threshold-2-kms-ci-core-2
        port: 50001
      - id: 3
        host: kms-service-threshold-3-kms-ci-core-3
        port: 50001
      - id: 4
        host: kms-service-threshold-4-kms-ci-core-4
        port: 50001
      - id: 5
        host: kms-service-threshold-5-kms-ci-core-5
        port: 50001
      - id: 6
        host: kms-service-threshold-6-kms-ci-core-6
        port: 50001
      - id: 7
        host: kms-service-threshold-7-kms-ci-core-7
        port: 50001
      - id: 8
        host: kms-service-threshold-8-kms-ci-core-8
        port: 50001
      - id: 9
        host: kms-service-threshold-9-kms-ci-core-9
        port: 50001
      - id: 10
        host: kms-service-threshold-10-kms-ci-core-10
        port: 50001
      - id: 11
        host: kms-service-threshold-11-kms-ci-core-11
        port: 50001
      - id: 12
        host: kms-service-threshold-12-kms-ci-core-12
        port: 50001
      - id: 13
        host: kms-service-threshold-13-kms-ci-core-13
        port: 50001
  aws:
    region: eu-west-1
  publicVault:
    s3:
      enabled: true
      path: ""
  privateVault:
    s3:
      enabled: true
      path: ""
  storage:
    storageClassName: gp3
    capacity: 5Gi
  serviceMonitor:
    enabled: true
  resources:
    requests:
      memory: 96Gi
      cpu: 48
    limits:
      memory: 96Gi
      ephemeralStorage: 1Gi
      grpcTimeout: 360
      grpcMaxMessageSize: 104857600
  nodeSelector:
    karpenter.sh/nodepool: kms-bench-spot-64
  tolerations:
    - key: karpenter.sh/nodepool
      effect: NoSchedule
      operator: Equal
      value: kms-bench-spot-64
mtls:
  enabled: false
environment: dev
redis:
  enabled: false
  host: "redis://redis-master.common.svc.cluster.local"
tracing:
  enabled: false
  endpoint: "http://observability-zws-dev-observability-alloy.observability.svc.cluster.local:4317"

socat:
  image:
    name: alpine/socat
    tag: latest
rustLog: info
minio:
  enabled: false
kyverno:
  enabled: false
kmsInit:
  enabled: false
kmsGenKeys:
  enabled: false
# Cronjob kubernetes
# Store the key-id and crs-id in files for later use in /app/key-files volume
# Then launch a test of the KMS core client

kmsCoreClientTesting:
  enabled: false
  # schedule: "5 * * * *"
  shell_command:
    - date
    - ./bin/kms-core-client --logs --max-iter 1200 -f config.toml preproc-key-gen
    - date
    # kmsCoreClientTesting:
  # enabled: true
  # schedule: "40 * * * *"
  # shell_command:
  # - echo "######################################################################"
  # - echo "Launching testing core-client"
  # - echo ""
  # - echo ""
  # - echo "######################################################################"
  # - echo ""
  # - if [ ! -f "/app/key-files/key-id.txt" ] && [ ! -f "/app/key-files/crs-id.txt" ]; then echo "Launching insecure key generation"; result_key_id=$(bin/kms-core-client -f config.toml insecure-key-gen); echo "######################################################################"; echo "Launching insecure crs generation"; result_crs_id=$(bin/kms-core-client -f config.toml insecure-crs-gen --max-num-bits 128); key_id=$(echo $result_key_id | grep request_id | cut -d'"' -f4); crs_id=$(echo $result_crs_id | grep request_id | cut -d'"' -f4); echo "${key_id}" > /app/key-files/key-id.txt; echo "${crs_id}" > /app/key-files/crs-id.txt;
  # - fi
  # - key_id=$(cat /app/key-files/key-id.txt)
  # - crs_id=$(cat /app/key-files/crs-id.txt)
  # - for i in 1 2 3 4 5; do echo "######################################################################"; echo "Launching public-decrypt with euint8"; bin/kms-core-client --logs -f config.toml public-decrypt from-args -d euint8 -k $key_id -e ff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching public-decrypt with euint32"; bin/kms-core-client --logs -f config.toml public-decrypt from-args -d euint32 -k $key_id -e ffffffff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching public-decrypt with euint64"; bin/kms-core-client --logs -f config.toml public-decrypt from-args -d euint64 -k $key_id -e ffffffffffffffff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching public-decrypt with euint128"; bin/kms-core-client --logs -f config.toml public-decrypt from-args -d euint128 -k $key_id -e ffffffffffffffffffffffffffffffff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching user-decrypt with euint8"; bin/kms-core-client --logs -f config.toml user-decrypt from-args -d euint8 -k $key_id -e ff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching user-decrypt with euint32"; bin/kms-core-client --logs -f config.toml user-decrypt from-args -d euint32 -k $key_id -e ffffffff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching user-decrypt with euint64"; bin/kms-core-client --logs -f config.toml user-decrypt from-args -d euint64 -k $key_id -e ffffffffffffffff --precompute-sns --num-requests 100; echo "######################################################################"; echo "Launching user-decrypt with euint128"; bin/kms-core-client --logs -f config.toml user-decrypt from-args -d euint128 -k $key_id -e ffffffffffffffffffffffffffffffff --precompute-sns --num-requests 100; done
podSecurityContext:
  # To set when the image will support non root user
  runAsUser: 10003
  runAsGroup: 10002
  fsGroup: 10002
  runAsNonRoot: true